#!/bin/bash

#just some variables
UA="Spinach/0.1.4"
AURINFO="info"
AURSEARCH="search"
AURPC="https://aur.archlinux.org/rpc.php?type=%s&arg=%s"
AURDO="https://aur.archlinux.org/packages/%s/%s.tar.gz"
#the list of pacman ignore packages
IGNORE="$(grep -E ^IgnorePkg /etc/pacman.conf | sed -e "s/.*=\ //g")"

#a bunch of functions so you can `. /usr/bin/spinach` in other scripts
aur_download() {
    package="$1"

	#file exists?
	if [ -e "$package" ]; then
		echo "Exists: $package"
		return 1
	else
		#download if it exists
    	if [ "$(curl "$(printf $AURPC $AURINFO $package)" 2>/dev/null \
			| grep 'No result found')" == "" ]; then
			curl -A "$UA" "$(printf $AURDO $package $package)" \
				-O "$package.tar.gz" 2>/dev/null || return 1
	        tar xzf "$package.tar.gz" || return 1
	        rm "$package.tar.gz" || return 1
			echo "Saved: $package/"
	    else
	        echo "Not Found: $package"
			return 1
	    fi
	fi
}

aur_download_deps() {
	package="$1"

	#download main package
	aur_download "$package" || return 1
	#get the depends from the PKBGUILD
	if [ -e "$package/PKGBUILD" ]; then
		depends="$(grep -E "^depends" "$package/PKGBUILD" 2>/dev/null | sed -re "
		s/.*\((.*)\).*/\1/g
		s/'([^><=']*)[><=]+[^']*'/\1/g
		s/'//g")"
	else
		echo "Does not exist: $package/PKGBUILD"
		return 1
	fi
	
	#find non-installed packages that are only in AUR
	for i in $depends; do
		pacman -Ssq "$i" | grep -E "^$i$" &>/dev/null
		official="$?"
		pacman -Qi "$i" &>/dev/null
		have="$?"
		
		if [ "$official" == "1" ] && [ "$have" == "1" ] && [ ! -e "$i/" ]; then
			aur_download_deps "$i" || return 1
		fi
	done
}

aur_update() {
	quiet="$1"
    packages="$(pacman -Qmq)"

	#get rid of ignored packages
	for i in $IGNORE; do
		packages="$(echo "$packages" | grep -v "$i")"
	done
    
	#update
    for i in $packages; do
        updateversion=$(curl -A "$UA" "$(printf $AURPC $AURINFO $i)" \
			2>/dev/null | sed -re 's/.*Version\":\"([^\"]*)\".*/\1/g')
		currentversion=$(pacman -Qi "$i" | grep -m 1 Version \
			| sed -re 's/.*:\ //g')

		if [ "$(echo "$updateversion" | grep "No result found")" == "" ] \
		&& [ "$updateversion" != "$currentversion" ]; then
			if [ "$quiet" == "" ]; then
				echo "$i ($currentversion => $updateversion)"
			else
				echo "$i"
			fi
		fi
    done
}

aur_info() {
	package="$1"
	curl -A "$UA" "$(printf $AURPC $AURINFO $package)" 2>/dev/null | sed -re '
	s/.*No result found.*/Package not found/g
	s/\\"/\&QUOT;/g
	s/.*results":\{(.*)\}\}/\1/g
	s/\",\"/\"\n\"/g
	s/\\\//\//mg
	s/"//mg
	s/^([^:]*):/\1: /mg
	s/\\\\/\\/mg
	s/\&QUOT;/"/mg
	s/^URLPath: /URLPath: https:\/\/aur.archlinux.org/mg'
	echo
}

aur_search() {
	query="$1"
	curl -A "$UA" "$(printf $AURPC $AURSEARCH $query)" 2>/dev/null | sed -re '
	s/.*No results found.*/Package not found\n/g
	s/\\"/\&QUOT;/g
	s/.*\[([^"]*)\]}}/\1/g
	s/\{[^}]*"Name":"([^"]*)",[^}]*,"Description":"([^"]*)"[^}]*\}/\1: \2\n/g
	s/^,//mg
	s/\\\//\//mg
	s/\\\\/\\/mg
	s/\&QUOT;/"/mg
	s/^]}//mg'
}

aur_download_updates() {
	updates=$(aur_update quiet)
	for i in $updates; do
		aur_download "$i"
	done
}

aur_spinach_help() {
	echo -e "Usage: $0 [options] [package]
	-d	Download specified package
	-dd	Download specified package and AUR dependencies
	-i	Print info for specified package
	-s	Search the AUR for a package
	-u	List out-of-date packages
	-du	Download all updates"
}

blank_arg() {
	if [ "$1" == "" ]; then
		echo "Please specify a package."
		exit 1
	fi
}

#for terminal usage
while [ "$1" != "" ]; do
	case "$1" in
		"-u") aur_update;;
		"-du") aur_download_updates;;
		"-i") shift; blank_arg "$1"; aur_info "$1";;
		"-s") shift; blank_arg "$1"; aur_search "$1";;
		"-d") shift; blank_arg "$1"; aur_download "$1";;
		"-dd") shift; blank_arg "$1"; aur_download_deps "$1";;
		"--version") echo "$UA";; 
		"-h"|"--help") aur_spinach_help;;
	esac
	shift
done
