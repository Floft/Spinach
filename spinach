#!/bin/bash
UA="Spinach/0.2.2"
ssl='';col='';nc=''
AURPC="http%s://aur.archlinux.org/rpc.php?type=%s&arg=%s"
AURDO="http%s://aur.archlinux.org/packages/%s/%s.tar.gz"

#functions so you can `. spinach -col -ssl`
aur_download() {
	p="$1" #package

	if [ -e "$p" ]; then
		echo -ne "${col}Exists${nc}: "; echo "$p"
		return 1
	else
		#is it in AUR
    		if [ -z "$(curl "$(printf $AURPC "$ssl" info $p)" 2>/dev/null \
		| grep 'No result found')" ]; then
			curl -A "$UA" "$(printf $AURDO "$ssl" $p $p)" \
				-O "$p.tar.gz" 2>/dev/null || return 1
		        tar xzf "$p.tar.gz" || return 1
		        rm "$p.tar.gz" || return 1
			echo -ne "${col}Saved${nc}: "; echo "$p/"
		else
	        	echo -ne "${col}Not Found${nc}: "; echo "$p"
			return 1
		fi
	fi
}
aur_download_deps() {
	p="$1" #package

	aur_download "$p" || return 1
	#get PKGBUILD depends
	if [ -e "$p/PKGBUILD" ]; then
		depends="$(cat "$p/PKGBUILD" | tr '\n' ' ' | \
			grep -Eo " (make)?depends=\([^)]*\)" 2>/dev/null | sed -re "
			s/.*\((.*)\).*/\1/mg
			s/(['\"])([^><=']*)[><=]+[^'\"]*\1/\2/mg
			s/['\"]//mg" | tr '\n' ' ' | sed -re "s/\\\$[^ ]+ //mg")"
	else
		echo -ne "${col}Does not exist${nc}: "; echo "$p/PKGBUILD"
		return 1
	fi

	#find AUR, non-installed depends
	for i in $depends; do
		pacman -Qi $(pacman -Qsq "$i"||echo -h) | \
			grep -E "^(Name|Provides)" | sed -re '
			s/^[^:]*: //mg
			s/=[^ ]*//mg' | tr ' ' '\n' | grep "^$i$" &>/dev/null
		provided="$?"
		pacman -Ssq "$i" | grep "^$i$" &>/dev/null
		official="$?"
		
		if [ "$official$provided" == "11" ] && [ ! -e "$i/" ]; then
			aur_download_deps "$i" || return 1
		fi
	done
}
aur_update() {
	quiet="$1"
	p="$(pacman -Qmq 2>/dev/null)" #packages
	
	#remove ignored
	ignore="$(grep ^IgnorePkg /etc/pacman.conf | sed -e "s/.*=\ //g")"
	for i in $ignore; do
		p="$(echo "$p" | grep -v "$i")"
	done
    
	#find updates
	for i in $p; do
		#up-to-date version
		up=$(curl -A "$UA" "$(printf $AURPC "$ssl" info "$i")" 2>/dev/null \
			| sed -re 's/.*Version\":\"([^\"]*)\".*/\1/g')
		#installed version
		in=$(pacman -Qi "$i" 2>/dev/null | grep -m 1 Version \
			| sed -re 's/.*:\ //g')
	
		if [ -z "$(echo "$up" | grep "No result found")" ] \
		&& [ -n "$up" ] && [ -n "$in" ] && [ "$up" != "$in" ]; then
			if [ -n "$quiet" ]; then
				echo "$i"
			else
				echo -ne "${col}"; echo -n "$i"
				echo -ne "${nc}"; echo " ($in => $up)"
			fi
		fi
	done
}
aur_display_color() {
	type xargs &>/dev/null
	has_xarg=$?
	if [ -n "$col" ] && [ "$has_xarg" == "0" ]; then
		cat /dev/stdin | sed -r 's/^([^:]*): +/\'$col'\1\'$nc': /g' \
			| xargs -0 echo -en
	else
		cat /dev/stdin
	fi
}
aur_info() {
	curl -A "$UA" "$(printf $AURPC "$ssl" info "$1")" 2>/dev/null | sed -re '
	s/.*No result found.*/Error: Package not found/g
	s/\\"/\&QUOT;/g
	s/.*results":\{(.*)\}\}/\1/g
	s/\",\"/\"\n\"/g
	s/\\\//\//mg
	s/"//mg
	s/^([^:]*):/\1: /mg
	s/\\\\/\\/mg
	s/\&QUOT;/"/mg
	s/^URLPath: /URLPath: https:\/\/aur.archlinux.org/mg' | aur_display_color
	echo
}
aur_search() {
	curl -A "$UA" "$(printf $AURPC "$ssl" search "$1")" 2>/dev/null | sed -re '
	s/.*(No results found).*/\1\n/g
	s/\\"/\&QUOT;/g
	s/.*\[([^"]*)\]}}/\1/g
	s/\{[^}]*"Name":"([^"]*)",[^}]*,"Description":"([^"]*)"[^}]*\}/\1: \2\n/g
	s/^,//mg
	s/\\\//\//mg
	s/\\\\/\\/mg
	s/\&QUOT;/"/mg
	s/^]}//mg' | aur_display_color
}
aur_download_updates() {
	updates="$(aur_update q)"
	for i in $updates; do
		aur_download "$i"
	done
}
aur_spinach_help() {
	echo -e "${col}Usage${nc}: spinach [options] [package]
	-d	Download specified package
	-dd	Download specified package and AUR dependencies
	-i	Print info for specified package
	-s	Search the AUR for a package
	-u	List out-of-date packages
	-du	Download all updates
	-ssl	Use SSL (put first)
	-col	Use color (put first)"
}
blank_arg() {
	if [ -z "$1" ]; then
		echo -e "${col}Error${nc}: Please specify a package."
		exit 1
	fi
}

while [ -n "$1" ]; do
	case "$1" in
		"-u") aur_update;;
		"-du") aur_download_updates;;
		"-i") shift; blank_arg "$1"; aur_info "$1";;
		"-s") shift; blank_arg "$1"; aur_search "$1";;
		"-d") shift; blank_arg "$1"; aur_download "$1";;
		"-dd") shift; blank_arg "$1"; aur_download_deps "$1";;
		"-ssl") ssl="s";;
		"-col") col='\e[0;31m'; nc='\e[0m';;
		"--version") echo "$UA";; 
		"-h"|"--help") aur_spinach_help;;
	esac
	shift
done
