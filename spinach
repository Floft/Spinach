#!/bin/bash
UA="Spinach"
VE="0.3.93"
ssl=;col=;col1=;col2=;nc=;rep=
AURURL="http%s://aur.archlinux.org"
AURPC="$AURURL/rpc.php?type=%s&arg=%s"

#functions so you can `. spinach -col`
aur_search() {
	if [ -n "$rep" ]; then
		pacman -Ss "$1" | sed -r 's/^([^/\s]+\/[^ ]+) [^\n]+$/\1/g' | \
			sed -rn '1h;1!H;${;g;s/\n\s+/: /g;p;}' | aur_display_color
	fi
	curl -sA "$UA" "$(printf $AURPC "$ssl" search "$1")" | sed -r '
	s/.*(No results found).*/\1\n/g
	s/\\"/\&QUOT;/g
	s/.*\[([^"]*)\]}}/\1/g
	s/\{[^}]*"Name":"([^"]*)",[^}]*,"Description":"([^"]*)"[^}]*\}/\1: \2\n/g
	s/^,//mg
	s/\\\//\//mg
	s/\\\\/\\/mg
	s/\&QUOT;/"/mg
	s/^]}//mg' | aur_display_color
}
aur_info() {
	if [ -n "$rep" ]; then
		info="$(pacman -Si "$1" 2>/dev/null)"
		gotinfo=$?
		
		if [ -n "$info" ]; then
			echo "$info" | aur_display_color
		fi
	fi
	if [ -z "$rep" ] || [ "$gotinfo" != "0" ]; then
		curl -sA "$UA" "$(printf $AURPC "$ssl" info "$1")" | sed -r '
		s/.*No result found.*/Error:Package not found/g
		s/\\"/\&QUOT;/g
		s/.*results":\{(.*)\}\}/\1/g
		s/\",\"/\"\n\"/g
		s/\\\//\//mg
		s/"//mg
		s/^([^:]*):/\1: /mg
		s/\\\\/\\/mg
		s/\&QUOT;/"/mg
		s/^URLPath: /URLPath: https:\/\/aur.archlinux.org/mg' | aur_display_color
		echo
	fi
}
aur_install() {
	blank_editor || return 1
	#from repos
	if [ -n "$rep" ]; then
		if pacman -Si "$1" &>/dev/null || [ "$(pacman -Sgq "$1" 2>/dev/null | \
		wc -l)" -gt "0" ]; then
			pacman_run -S $1
			return $?
		fi
	fi
	#from AUR
	aur_create_tmp || return 1
	cd "$tmp/build"
	downloaded=""
	trap "for i in \$downloaded; do rm -rf \"$tmp/build/\$i/\" &>/dev/null;done;
		echo;exit 1" 2 15
	aur_download_deps "$1" install
	trap - 2 15
}
aur_update() {
	downloaded=""
	blank_editor || return 1
	aur_create_tmp || return 1
	#lock
	[ -e "$tmp/update.lock" ] && aur_message "Error" "update lock exists" && return 1
	touch "$tmp/update.lock"
	#clean on kill
	trap "for i in \$downloaded; do rm -rf \"$tmp/build/\$i/\" &>/dev/null;done;
		rm \"$tmp/update.lock\";echo;exit 1" 2 15
	cd "$tmp/build"
	#get list (outputs to $download)
	aur_find_updates u
	#download and install after confirming
	IFS=$' '
	for i in $download; do
		ask_yes_no "Update ${i}?"
		if [ "$response" == "y" ]; then
			if aur_download "$i" installed; then
				downloaded="$downloaded $i"
				if [ -e "$i/PKGBUILD" ]; then
					cd "$i" && aur_run_install
				else
					aur_message "Missing" "$tmp/build/$i/PKGBUILD"
				fi
			fi
			cd "$tmp/build"
		fi
	done
	#clean
	for i in $downloaded; do
		rm -rf "$i/" &>/dev/null
	done
	rm "$tmp/update.lock"
	trap - 2 15
}
aur_download() {
	if [ -e "$1" ]; then
		aur_message "Exists" "$(pwd)/$1"
		return 1
	else
		url="$(curl -sfA "$UA" "$(printf $AURPC "$ssl" info "$1")" | sed -r '
			s/.*No result found.*//g
			s/.*URLPath":"([^"]+)".*/\1/g
			s/\\\//\//g')"
    		if [ -n "$url" ]; then
			curl -sfA "$UA" "$(printf "$AURURL$url" "$ssl")" -o "$1.tar.gz"
			tar xzf "$1.tar.gz" &>/dev/null
			#saved or not saved
			[ "$?" -gt "0" ] && saved="Not " || saved=""
			#print whether it is installed
			[ -z "$2" ] && pacman -T $1 &>/dev/null && \
				inst=" ${col2}(installed)${nc}" || inst=""
			printf "${col}%s${nc}: %s$inst\n" "${saved}Saved" "$1/"
			rm "$1.tar.gz" &>/dev/null || return 1
		else
			aur_message "Not Found" "$1"
			return 1
		fi
	fi
}
aur_download_deps() { # $1=package; $2=whether to install; $3=install with --asdeps
	aur_download "$1" "$2" && downloaded="$downloaded $1" || return 1
	#get PKGBUILD depends
	if [ -e "$1/PKGBUILD" ]; then
		depends="$(cat "$1/PKGBUILD" | tr '\n' ' ' | \
			grep -Eo " (make)?depends=\([^)]*\)" 2>/dev/null | sed -r "
			s/.*\((.*)\).*/\1/mg
			s/(['\"])([^><=']*)[><=]+[^'\"]*\1/\2/mg
			s/['\"]//mg" | tr '\n' ' ' | sed -r "s/\\\$[^ ]+ //mg")"
	else
		aur_message "Missing" "$(pwd)/$1/PKGBUILD"
		return 1
	fi
	#non-installed depends (only skip when installing)
	[ -n "$2" ] && depends=$(pacman -T $depends)
	#download if in the AUR
	for i in $depends; do
		pacman -Si $(pacman -Ssq "$i" || echo -h) | \
			grep -E "^(Name|Provides)" | sed -r '
			s/^[^:]*: //mg
			s/=[^ ]*//mg' | tr ' ' '\n' | grep "^$i$" &>/dev/null
		
		if [ "$?" == "1" ] && [ ! -e "$i/" ]; then
			aur_download_deps "$i" "$2" "asdep"
		fi
	done
	#install
	if [ "$2" == "install" ]; then
		if [ -e "$1/PKGBUILD" ]; then
			cd "$1"
			aur_run_install "$3"
			cd ..
		else
			aur_message "Missing" "$(pwd)/$1/PKGBUILD"
			rm -rf "$1/" &>/dev/null
		fi
	fi
}
aur_find_updates() {
	download=""
	p="$(pacman -Qmq 2>/dev/null)" #packages
	#remove ignored
	ignore="$(grep ^IgnorePkg /etc/pacman.conf | sed -e "s/.*=\ //g")"
	for i in $ignore; do
		p="$(echo "$p" | grep -v "$i")"
	done
	#list of aur packages
	list=""
	for i in $p; do
		list="$list $(printf "$AURPC" "$ssl" info "$i")"
	done
	#get versions from aur 
	inaur="$(curl -sA "$UA" $list | sed -re '
		s/\{[^}]*"results":"No result found"\}//g
		s/\{+[^}]*Name":"([^"]*)"[^}]*Version":"([^"]*)[^}]*\}+/\1\t\2\n/g')"
	#get installed versions
	inlocal="$(pacman -Qi $p | grep -E '^(Name|Version)' | tr '\n' ' ' | \
		sed -r 's/(Name|Version)\s+: /\n/g' | tail -n +2 | sed 's/ $//g')"
	#find differences
	IFS=$'\n'
	for i in $inaur; do
		name="$(echo $i | cut -f1)"
		#up-to-date version
		up="$(echo $i | cut -f2)"
		#installed version
		in="$(echo "$inlocal" | grep -A 1 "^$name$" | tail -n 1)"
		
		if [ -z "$(echo "$up" | grep "No result found")" ] \
		&& [ -n "$up" ] && [ -n "$in" ] && [ "$up" != "$in" ]; then
			[ -n "$1" ] && download="$download $name"
			printf "${col}%s${nc} (${col3}%s${nc} => ${col2}%s${nc})\n" \
				"$name" "$in" "$up"
		fi
	done
}
aur_download_updates() {
	aur_find_updates u #outputs to $download
	IFS=$' '
	for i in $download; do
		aur_download "$i"
	done
}
#sub-functions
aur_run_install() {
	pwd="$(pwd)"
	$EDITOR PKGBUILD
	inst="$(grep ^install= PKGBUILD | cut -d= -f2 | tr -d "'\"")"
	[ -e "$inst"  ] && $EDITOR "$inst"
	#install
	ask_yes_no "Install?"
	if [ "$response" == "y" ]; then
		makepkg -sc
		#install
		[ -n "$1" ] && asdep="--asdeps" || asdep=""
		#ask if the user wants try again on fail
		while true; do
			if ! pacman_run $asdep '-U *.pkg.tar.xz'; then
				ask_yes_no "Try again?"
				[ "$response" == "n" ] && break
			else
				break
			fi
		done
		#copy to cache
		mv *.pkg.tar.xz "../../cache" &>/dev/null
	fi
	#clean
	rm -rf "$pwd/" &>/dev/null
}
aur_create_tmp() {
	if [ -z "$SPINTMPDIR" ]; then
		[ -n "$TMPDIR" ] && SPINTMPDIR="$TMPDIR" || SPINTMPDIR="/tmp"
	fi
	tmp="$SPINTMPDIR/spinach"
	if ! mkdir -p "$tmp" "$tmp/cache" "$tmp/build" &>/dev/null; then
		aur_message "Error" "could not create $tmp"
		return 1
	fi
}
aur_display_color() {
	if [ -n "$col" ] && type xargs &>/dev/null; then
		cat /dev/stdin | sed -r 's/^([^: \t]+[^:]*): +/\'$col'\1\'$nc': /g' \
			| xargs -0 echo -en
	else
		cat /dev/stdin
	fi
}
aur_message() {
	message="$1";shift;rest="$@"
	printf "${col}%s${nc}: %s\n" "$message" "$rest"
}
blank_arg() {
	[ -z "$1" ] && aur_message "Please specify a package." && exit 1
}
ask_yes_no() {
	while true; do
		printf "${col}y/n${nc}: %s " "$1"
		read resp
		
		if [ "$resp" == "y" ] || [ "$resp" == "n" ]; then
			response="$resp"
			return 0
		fi
	done
}
pacman_run() {
	if type sudo &>/dev/null; then
		aur_message "Running" "sudo pacman "$@
		sudo pacman $@
	else
		aur_message "Running" "su -c pacman "$@
		su -c "pacman $@"
	fi
	
	return $?
}
blank_editor() {
	if [ -z "$EDITOR" ]; then
		for i in vim emacs vi nano most less more cat; do
			if type $i &>/dev/null; then
				EDITOR="$i"
				aur_message "Note" "No \$EDITOR, using '$i'"
				break
			fi
		done
		if [ -z "$EDITOR" ]; then
			aur_message "Error" "set \$EDITOR"
			return 1
		fi
	fi
}
aur_spinach_help() {
	echo -e "${col}Usage${nc}: spinach [options] [operation] [package]
	Options:
	-ssl	Use SSL
	-col	Use color
	-rep	Also use pacman with -s, -p, and -i
	
	Common operations:
	-s	Search for package
	-p	Print package info
	-i	Install package
	-u	Update packages
	
	Do-it-yourself operations:
	-d	Download package
	-dd	Download package and AUR dependencies
	-o	List out-of-date packages
	-do	Download out-of-date packages
	
	Variables:
	\$EDITOR		defaults to vim, emacs, etc.
	\$SPINTMPDIR	defaults to \$TMPDIR or /tmp"
}

while [ -n "$1" ]; do
	case "$1" in
		#options
		"-ssl") ssl="s";;
		"-col") col='\e[0;31m'; col2='\e[0;32m'; col3='\e[0;34m'; nc='\e[0m';;
		"-rep") rep="y";;
		#common
		"-s") shift; blank_arg "$1"; aur_search "$1";;
		"-i") shift; blank_arg "$1"; aur_install "$1";;
		"-p") shift; blank_arg "$1"; aur_info "$1";;
		"-u") aur_update;;
		#diy
		"-d") shift; blank_arg "$1"; aur_download "$1";;
		"-dd") shift; blank_arg "$1"; aur_download_deps "$1";;
		"-o") aur_find_updates;;
		"-do") aur_download_updates;;
		#other
		"--version") echo "$UA/$VE"; exit 0;; 
		"-h"|"--help") aur_spinach_help; exit 0;;
	esac
	shift
done
