#!/bin/bash
UA="Spinach"
VE="0.4.18"
unset ssl col col1 col2 nc op rep spintmpdir
maxthreads=10
AURURL="http%s://aur.archlinux.org"
AURPC="$AURURL/rpc.php?type=%s&arg=%s"

aur_search() {
	if [[ -z $2 ]]; then
		[[ -n $rep ]] && pacman -Ss "$1" | sed -r 's/^([^/\s]+\/[^ ]+) [^\n]+$/\1/g' | \
				sed -rn '1h;1!H;${;g;s/\n\s+/: /g;p;}' | aur_display_color
		curl -sA "$UA" "$(printf $AURPC "$ssl" search "$1")" | sed -r '
		s/.*(No results found).*/\1\n/g
		s/^\{"type":"error".*/No results found/g
		s/"Version":"[^"]+"//g
		s/\\"/\&QUOT;/g
		s/.*\[([^"]*)\]}}/\1/g
		s/\{[^}]*"Name":"([^"]*)",[^}]*,"Description":"([^"]*)"[^}]*\}/\1: \2\n/g
		s/^,//mg
		s/\\\//\//mg
		s/\\\\/\\/mg
		s/\&QUOT;/"/mg
		s/^]}//mg' | sort | aur_display_color
	else
		[[ -n $rep ]] && pacman -Ssq "$1"
		curl -sA "$UA" "$(printf $AURPC "$ssl" search "$1")" | \
			grep -Eo '"Name":"[^"]*"' | sed -r 's/"Name":"([^"]*)"/\1/g'
	fi
}
aur_info() {
	local gotinfo info

	if [[ -n $rep ]]; then
		info="$(pacman -Si "$1" 2>/dev/null)"
		gotinfo=$?
		
		[[ -n $info ]] && aur_display_color <<< "$info"
	fi
	if [[ -z $rep || $gotinfo != 0 ]]; then
		curl -sA "$UA" "$(printf $AURPC "$ssl" info "$1")" | sed -r '
		s/.*No result found.*/Error:Package not found/g
		s/\\"/\&QUOT;/g
		s/.*results":\{(.*)\}\}/\1/g
		s/\",\"/\"\n\"/g
		s/\\\//\//mg
		s/"//mg
		s/^([^:]*):/\1: /mg
		s/\\\\/\\/mg
		s/\&QUOT;/"/mg
		s/^URLPath: /URLPath: https:\/\/aur.archlinux.org/mg' | aur_display_color
		echo
	fi
}
aur_install() {
	blank_editor || return 1
	#from repos
	if [[ -n $rep ]]; then
		if pacman -Si "$1" &>/dev/null || (( $(pacman -Sgq "$1" 2>/dev/null | \
		wc -l) > 0 )); then
			pacman_run -S $1
			return $?
		fi
	fi
	#from AUR
	aur_create_tmp || return 1
	cd "$tmp/build"
	downloaded=""
	trap "for i in \$downloaded; do rm -rf \"$tmp/build/\$i/\" &>/dev/null;done;
		echo;exit 1" 2 15
	aur_download_deps "$1" install
	trap - 2 15
}
aur_update() {
	local i

	downloaded=""
	blank_editor || return 1
	aur_create_tmp || return 1
	cd "$tmp/build"
	#get list (outputs to $download)
	aur_find_updates u
	#lock
	[[ -e $tmp/update.lock ]] && aur_message "Error" "update lock exists" && return 1
	touch "$tmp/update.lock"
	#clean on kill
	trap "for i in \$downloaded; do rm -rf \"$tmp/build/\$i/\" &>/dev/null;done;
		rm \"$tmp/update.lock\";echo;exit 1" 2 15
	#download and install after confirming
	IFS=$' '
	for i in $download; do
		ask_yes_no "Update ${i}?"
		if [[ $response == y ]]; then
			if aur_download "$i" installed; then
				downloaded="$downloaded $i"
				if [[ -e $i/PKGBUILD ]]; then
					cd "$i" && aur_run_install
				else
					aur_message "Missing" "$tmp/build/$i/PKGBUILD"
				fi
			fi
			cd "$tmp/build"
			#cd "$tmp/build && aur_download_deps "$i" install
		fi
	done
	#clean
	for i in $downloaded; do
		rm -rf "$i/" &>/dev/null
	done
	rm "$tmp/update.lock"
	trap - 2 15
}
aur_download() {
	local saved inst

	if [[ -e $1 ]]; then
		aur_message "Exists" "$(pwd)/$1"
		return 1
	else
		url="$(curl -sfA "$UA" "$(printf $AURPC "$ssl" info "$1")" | sed -r '
			s/.*No result found.*//g
			s/.*URLPath":"([^"]+)".*/\1/g
			s/\\\//\//g')"
    		if [[ -n $url ]]; then
			curl -sfA "$UA" "$(printf "$AURURL$url" "$ssl")" -o "$1.tar.gz"
			tar xzf "$1.tar.gz" &>/dev/null
			#saved or not saved
			(( $? > 0 )) && saved="Not "
			#print whether it is installed
			[[ -z $2 ]] && pacman -T $1 &>/dev/null && \
				inst=" ${col2}(installed)${nc}"
			printf "${col}%s${nc}: %s$inst\n" "${saved}Saved" "$1/"
			rm "$1.tar.gz" &>/dev/null || return 1
		else
			aur_message "Not Found" "$1"
			return 1
		fi
	fi
}
aur_download_deps() { # $1=package; $2=whether to install; $3=install with --asdeps
	local i depends provides dir

	aur_download "$1" "$2" && downloaded="$downloaded $1" || return 1
	#get PKGBUILD depends
	if [[ -e $1/PKGBUILD ]]; then
		depends="$(tr '\n' ' ' < "$1/PKGBUILD" | \
			grep -Eos " (make)?depends=\([^)]*\)" | sed -r "
			s/.*\((.*)\).*/\1/mg
			s/(['\"])([^><=']*)[><=]+[^'\"]*\1/\2/mg
			s/['\"]//mg" | tr '\n' ' ' | sed -r "s/\\\$[^ ]+ //mg")"
	else
		aur_message "Missing" "$(pwd)/$1/PKGBUILD"
		return 1
	fi
	#non-installed depends (only skip when installing)
	[[ -n $2 ]] && depends=$(pacman -T $depends)
	#find if depends are in pacman repos
	provides="$(pacman -Si $(pacman -Ssq "($(tr ' ' '|' <<< "$depends"|tr '\n' '|'))"||echo -h) | \
		grep -E "^(Name|Provides)" | sed -r '
		s/^[^:]*: //mg
		s/=[^ ]*//mg' | tr ' ' '\n')"
	#download if in the AUR
	for i in $depends; do
		if ! grep -q "^$i$" <<< "$provides" && [[ ! -e $i/ ]]; then
			aur_download_deps "$i" "$2" "asdep"
		fi
	done
	#install
	if [[ $2 == install ]]; then
		if [[ -e $1/PKGBUILD ]]; then
			dir="$(pwd)"
			cd "$1"
			aur_run_install "$3"
			cd "$dir"
		else
			aur_message "Missing" "$(pwd)/$1/PKGBUILD"
			rm -rf "$1/" &>/dev/null
		fi
	fi
}
aur_find_updates() {
	local i p ignore aur_versions curl_kill_list threads number urls inaur inlocal name up in

	aur_create_tmp || return 1
	download=""
	p="$(pacman -Qmq 2>/dev/null)" #packages
	#remove ignored
	ignore="$(grep ^IgnorePkg /etc/pacman.conf | sed -e "s/.*=\ //g")"
	for i in $ignore; do
		p="$(grep -v "$i" <<< "$p")"
	done
	#get versions from aur with multiple threads
	aur_versions="$tmp/findupdates_$$"
	curl_kill_list=""
	touch "$aur_versions"
	trap "kill \$curl_kill_list &>/dev/null; rm \"$aur_versions\"; exit 1" 2 15
	threads=()
	number=0
	for i in $p; do #split urls for diff threads
		threads[$number]="$(printf "$AURPC" "$ssl" info "$i") ${threads[$number]}"
		[[ $number == $maxthreads ]] && number=0 || number=$(($number+1))
	done
	for i in ${!threads[@]}; do #create threads
		urls="${threads[$i]}"
		curl -sA "$UA" -m 5 --retry-delay 1 --retry 4 $urls >> "$aur_versions" &
		curl_kill_list="$! $curl_kill_list"
	done
	while (( $(jobs|wc -l) > 0 )); do #wait for threads
		sleep 0.05
		jobs &>/dev/null
	done
	inaur="$(sed -re '
		s/\{[^}]*"results":"No result found"\}//g
		s/\{+[^}]*Name":"([^"]*)"[^}]*Version":"([^"]*)[^}]*\}+/\1\t\2\n/g' < "$aur_versions" | \
		sort)"
	trap - 2 15
	rm "$aur_versions"
	#get installed versions
	inlocal="$(pacman -Qi $p | grep -E '^(Name|Version)' | tr '\n' ' ' | \
		sed -r 's/(Name|Version)\s+: /\n/g' | tail -n +2 | sed 's/ $//g')"
	#find differences
	IFS=$'\n'
	for i in $inaur; do
		name="$(cut -f1 <<< "$i")"
		#up-to-date version
		up="$(cut -f2 <<< "$i")"
		#installed version
		in="$(grep -A 1 "^$name$" <<< "$inlocal" | tail -n 1)"
		
		if [[ $up != $in && -n $up && -n $in && -z $(grep "No result found"<<<"$up") ]] \
		&& [[ $(vercmp "$in" "$up") == -1 ]]; then
			[[ -n $1 ]] && download="$download $name"
			printf "${col}%s${nc} (${col3}%s${nc} => ${col2}%s${nc})\n" \
				"$name" "$in" "$up"
		fi
	done
}
aur_download_updates() {
	local i

	aur_find_updates u #outputs to $download
	IFS=$' '
	for i in $download; do
		aur_download "$i"
	done
}
#sub-functions
aur_run_install() {
	local inst response asdep

	pwd="$(pwd)"
	$EDITOR PKGBUILD
	inst="$(grep ^install= PKGBUILD | cut -d= -f2 | tr -d "'\"")"
	[[ -e $inst ]] && $EDITOR "$inst"
	#install
	ask_yes_no "Install?"
	if [[ $response == y ]]; then
		makepkg -sc
		#install
		[[ -n $1 ]] && asdep="--asdeps"
		#ask if the user wants try again on fail
		while true; do
			if ! pacman_run $asdep '-U *.pkg.tar.xz'; then
				ask_yes_no "Try again?"
				[[ $response == n ]] && break
			else
				break
			fi
		done
		#copy to cache
		mv ./*.pkg.tar.xz "../../cache" &>/dev/null
	fi
	#clean
	cd ../
	rm -rf "$pwd/" &>/dev/null
}
aur_create_tmp() {
	[[ -z $spintmpdir ]] && spintmpdir=${TMPDIR:-/tmp}

	tmp="$spintmpdir/spinach"
	if ! mkdir -p "$tmp" "$tmp/cache" "$tmp/build" &>/dev/null; then
		aur_message "Error" "could not create $tmp"
		return 1
	fi
}
aur_display_color() {
	[[ -n $col ]] && cat | sed -r 's/^([^: \t]+[^:]*): +/\'$col'\1\'$nc': /g' | \
		xargs -0 echo -en || cat
}
aur_message() {
	local message rest

	message="$1";shift;rest="$@"
	printf "${col}%s${nc}: %s\n" "$message" "$rest"
}
ask_yes_no() {
	local resp

	while true; do
		printf "${col}y/n${nc}: %s " "$1"
		read resp
		
		if [[ $resp == y || $resp == n ]]; then
			response="$resp"
			return 0
		fi
	done
}
pacman_run() {
	local pacret

	shopt -s nullglob
	if type sudo &>/dev/null; then
		aur_message "Running" "sudo pacman "$@
		sudo pacman $@
		pacret=$?
	else
		aur_message "Running" "su root -c pacman "$@
		su root -c "pacman $@"
		pacret=$?
	fi
	shopt -u nullglob
	
	return $pacret
}
blank_editor() {
	local i

	if [[ -z $EDITOR ]]; then
		for i in vim emacs vi nano most less more cat; do
			if type $i &>/dev/null; then
				EDITOR="$i"
				aur_message "Note" "No \$EDITOR, using '$i'"
				break
			fi
		done

		[[ -z $EDITOR ]] && aur_message "Error" "set \$EDITOR" && return 1
	fi
}
blank_arg() {
	[[ -z $1 ]] && aur_message "Error" "Please specify at least one package." && exit 1
}
chkop() {
	[[ -n $op ]] && aur_message "Error" "You can only specify one operation."&& exit 1
}
aur_help() {
	cat <<EOF
Usage: spinach [options] [operation] [packages]

  Options
    --ssl	Use SSL
    --col	Use Color
    --rep	Use repositories
    --max  10	Set max threads
    --tmp  dir	Set temp directory
    --edit vim	Set editor

  Common Operations
    -s	pkg	Search (-sq for quiet)
    -p	pkg	Print info
    -i	pkg	Install
    -u		Update all

  Do-it-yourself Operations
    -d	pkg	Download
    -dd	pkg	Download with depends
    -o		List out-of-date
    -do		Download out-of-date

Try \`man spinach' for more information.
EOF
}

#defaults from config
config=${XDG_CONFIG_HOME:-$HOME/.config}/spinach/config

#don't source; what if I accidenty put a 'rm cows.txt' in there =)
if [[ -e $config ]]; then
	grep -q '^UseSSL' "$config" && ssl="s"
	grep -q '^UseRepos' "$config" && rep="y"
	grep -q '^Threads=' "$config" && \
		maxthreads="$(grep -s '^Threads=' "$config" | cut -d= -f2)"
	grep -q '^Temp=' "$config" && \
		spintmpdir="$(grep -s '^Temp=' "$config" | cut -d= -f2)"
	grep -q '^Editor=' "$config" && \
		EDITOR="$(grep -s '^Editor=' "$config" | cut -d= -f2)"

	if grep -q '^UseColor' "$config"; then
		col="$(grep -s '^Color1=' "$config" | cut -d= -f2)"
		col2="$(grep -s '^Color2=' "$config" | cut -d= -f2)"
		col3="$(grep -s '^Color3=' "$config" | cut -d= -f2)"
		nc='\e[0m'
	fi
fi

pkgnum=0
pkgargs=()

while [[ -n $1 ]]; do
	case "$1" in
		#options
		"--ssl") ssl="s";;
		"--rep") rep="y";;
		"--col") col='\e[0;31m'; col2='\e[0;32m'; col3='\e[0;34m'; nc='\e[0m';;
		"--nossl") unset ssl;;
		"--norep") unset rep;;
		"--nocol") unset col col2 col3 nc;;
		"--max") shift; blank_arg "$1"; maxthreads="$1";;
		"--tmp") shift; blank_arg "$1"; spintmpdir="$1";;
		"--edit") shift; blank_arg "$1"; EDITOR="$1";;
		#common
		"-s") chkop; op="s";;
		"-sq") chkop; op="sq";;
		"-i") chkop; op="i";;
		"-p") chkop; op="p";;
		"-u") chkop; op="u";;
		#diy
		"-d") chkop; op="d";;
		"-dd") chkop; op="dd";;
		"-o") chkop; op="o";;
		"-do") chkop; op="do";;
		#other
		"--version") echo "$UA/$VE"; exit 0;; 
		"-h"|"--help") aur_help; exit 0;;
		#packages
		*) pkgargs[$pkgnum]="$1"; pkgnum=$(($pkgnum+1));;
	esac
	shift
done

if [[ -n $op ]]; then
	#no packages
	case "$op" in
		u) aur_update; exit 0;;
		o) aur_find_updates; exit 0;;
		do) aur_download_updates; exit 0;;
	esac

	#requires packages
	if (( ${#pkgargs[@]} > 0 )); then
		for arg in ${!pkgargs[@]}; do
			pkgarg="${pkgargs[$arg]}"
			case "$op" in
				s) aur_search "$pkgarg";;
				sq) aur_search "$pkgarg" quiet;;
				i) aur_install "$pkgarg";;
				p) aur_info "$pkgarg";;
				d) aur_download "$pkgarg";;
				dd) aur_download_deps "$pkgarg";;
			esac
		done
	else
		blank_arg
	fi
fi
